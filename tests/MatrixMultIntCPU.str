void->void pipeline MatrixMultIntCPU {
    add InputReader<int>();
    add MatrixMultiply(8, 8, 8, 8);
    add intPrinter();
}

int->int pipeline MatrixMultiply(int x0, int y0, int x1, int y1) {
    // rearrange and duplicate the matrices as necessary:
    add RearrangeDuplicateBoth(x0, y0, x1, y1);
    add MultiplyAccumulateParallel(x0, x0);
}

int->int splitjoin RearrangeDuplicateBoth(int x0, int y0, 
    int x1, int y1) {
    split roundrobin(x0 * y0, x1 * y1);
    // the first matrix just needs to get duplicated 
    add DuplicateRows(x1, x0);
        
    // the second matrix needs to be transposed first
    // and then duplicated:
    add RearrangeDuplicate(x0, y0, x1, y1);
    join roundrobin;
}

int->int pipeline RearrangeDuplicate(int x0, int y0, int x1, int y1) {
    add Transpose(x1, y1);
    add DuplicateRows(y0, x1*y1);
}

int->int splitjoin Transpose(int x, int y) {
    split roundrobin;
    //for (int i = 0; i < x; i++) add Identity<int>();
    for (int i = 0; i < x; i++)
    {
        add int->int filter {
            work pop 1 push 1 {
                push(pop());
            }
        }
    }
    join roundrobin(y);
}

int->int splitjoin MultiplyAccumulateParallel(int x, int n) {
    split roundrobin(x*2);
    for (int i = 0; i < n; i++) add MultiplyAccumulate(x);
    join roundrobin(1);
}

int->int filter MultiplyAccumulate(int rowLength) {
    work pop rowLength*2 push 1 {
        int result = 0;
        for (int x = 0; x < rowLength; x++) {
            result += (peek(0) * peek(1));
	    pop();
	    pop();
        }
	push(result);
    }
}

int->int pipeline DuplicateRows(int x, int y) {
    add DuplicateRowsInternal(x, y);
}

int->int splitjoin DuplicateRowsInternal(int times, int length) {
   split duplicate;
   //for (int i = 0; i < times; i++) add Identity<int>();
   for (int i = 0; i < times; i++)
   {
     add int->int filter {
        work pop 1 push 1 {
            push(pop());
        }
     }
   }
   join roundrobin(length);
}

int->void filter intPrinter {
    work pop 1 {
	println(pop());
    }
}

