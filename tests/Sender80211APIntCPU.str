void->void pipeline Sender80211CPU
{
    add input;
	//add FileReader<int>();
	add scramble;
	add diff_encode;
	add chunk2symbol;
	add fir_filter;
	add output;
	//add FileWriter<int>("output.stream");
}

void -> int8 stateful filter input
{
    int8 last_out = 0;
    work push 1
    {
//        for (int i = 0; i < 8; i++)
//            push(i);
        if (last_out == 0)
            push(0x55);
        else
            push(0xaa);
        last_out = last_out ^ 1;
    }
}

int -> void filter output
{
	work pop 1
	{
		println(pop());
        //pop();
	}
}

int8 -> int8 stateful filter scramble
{
	int8[7] shift = {1, 1, 0, 1, 1, 0, 0};

	work pop 1 push 8
	{
		int input = pop();
		for (int j=0; j < 8; j++)
		{
			int output = ((input & (1 << j)) >> j) ^ (shift[3] ^ shift[6]);
			shift[6] = shift[5];
			shift[5] = shift[4];
			shift[4] = shift[3];
			shift[3] = shift[2];
			shift[2] = shift[1];
			shift[1] = shift[0];
			shift[0] = output;
			push(output);
		}
	}
}
		
int8 -> int8 stateful filter diff_encode
{
	int8 last_out = 0;

	work push 1 pop 1
	{
		last_out = (last_out + pop()) % 2;
		push(last_out);
	}
}

int8 -> int filter chunk2symbol
{
	int[2] bpsk_mod = {741343, -741343};
	//int counter = 0;
			
	work pop 1 push 1
	{
		int input = pop();
		push(bpsk_mod[input]);
		//push(counter++);
	}
}

int -> int pipeline fir_filter
{
	add splitjoin
	{
		split duplicate;
		add fir_filter_half;
		add fir_filter_half;
		join roundrobin;
	}
}

int -> int filter fir_filter_half
{
	int[16] rcc_taps = {0, -666, 69361, 157964, 255889, 351141, 430952, 484036, 502648, 484036, 430952, 351141, 255889, 157964, 69361, -666};
	
	//prework pop 0 peek 1 push 8
	//{
	//	int previous = 0;
	//	int current = peek(0);
	//	for (int j=0; j < 8; j++)
	//		push((rcc_taps[j] * (current >> 10) + rcc_taps[j+8] * (previous >> 10)) >> 10);
	//}
	
	work pop 1 peek 2 push 8
	{
		int previous = peek(0);
		int current = peek(1);
		//int temp = 0;
		for (int j=0; j < 8; j++){
			push((rcc_taps[j] * (current >> 10) + rcc_taps[j+8] * (previous >> 10 )) >> 10);
			//push((j << 28) + (current << 16) + previous);
			//push((j << 28) + (temp >> 8));
		}
		pop();
	}	
}
